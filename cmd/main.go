package main

import (
	"net/http"

	"ping_prog/cmd/service_provider"
)

func main() {
	sp := service_provider.NewServiceProvider()

	// –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	err := http.ListenAndServe(":8080", sp.GetRoutes())
	if err != nil {
		panic(err)
	}

	/*err := godotenv.Load()
	if err != nil { //–ø–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è
		log.Fatal("Error loading .env file")
	}

	addr := os.Getenv("Address")
	port, err := strconv.Atoi(os.Getenv("Port"))

	// BOT-------------------------------------------------
	var (
		chatID      int64
		chatIDLock  sync.Mutex
		chatIDFile  = os.Getenv("ChatIDFileName")
		botToken    = os.Getenv("TokenTelegramBot")
		pingAddress = os.Getenv("Address")
	)

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	log.Println("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω:", bot.Self.UserName)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π chatID (–µ—Å–ª–∏ –µ—Å—Ç—å)
	chatID = loadChatIDFromFile(chatIDFile)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω –¥–ª—è –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞
	go backgroundPing(bot, &chatIDLock, chatID, pingAddress)

	for update := range updates {
		if update.Message == nil || !update.Message.IsCommand() {
			continue
		}

		chatIDLock.Lock()
		if chatID == 0 {
			chatID = update.Message.Chat.ID
			saveChatIDToFile(chatID, chatIDFile)
			log.Println("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª chatID:", chatID)
		}
		chatIDLock.Unlock()

		switch update.Message.Command() {
		case "ping":
			err, pinger := commandPing(pingAddress)
			var msgText string
			if err != nil {
				msgText = "‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: " + err.Error()
			} else {
				stats := pinger.Statistics()
				msgText = fmt.Sprintf("üì° Ping result:\n–ü–æ—Ç–µ—Ä–∏: %.0f%%\n–í—Ä–µ–º—è: %v", stats.PacketLoss, stats.AvgRtt)
				if stats.PacketLoss == 100 {
					alert := tgbotapi.NewMessage(chatID, "üö® –ü–æ—Ç–µ—Ä—è 100% –ø–∞–∫–µ—Ç–æ–≤! –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
					bot.Send(alert)
				}
			}
			msg := tgbotapi.NewMessage(chatID, msgText)
			bot.Send(msg)

		case "status":
			msg := tgbotapi.NewMessage(chatID, "üìä –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
			bot.Send(msg)

		default:
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§ñ")
			bot.Send(msg)
		}
	}

	//------------------------------------------------------------------

	err, pinger := commandPing(addr)
	if err != nil {
		sendEmail(err, pinger, false)
		os.Exit(0) //–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å–ø–µ—Ö–æ–º
	} else if pinger.Statistics().PacketLoss == 100 {
		sendEmail(fmt.Errorf("–ø–∞–∫–µ—Ç—ã –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"), pinger, false)
		os.Exit(0)
	} else {
		err, portStatus := checkPort(addr, port)
		if err != nil {
			sendEmail(err, pinger, false)
			os.Exit(0)
		}

		if portStatus == false {
			sendEmail(err, pinger, false)
		}
	}*/
}

/*
// –§–æ–Ω–æ–≤—ã–π –ø–∏–Ω–≥ —Å —Ç—Ä–µ–≤–æ–≥–æ–π
func backgroundPing(bot *tgbotapi.BotAPI, chatIDLock *sync.Mutex, chatID int64, pingAddress string) {
	for {
		time.Sleep(30 * time.Second)

		chatIDLock.Lock()
		currentChatID := chatID
		chatIDLock.Unlock()

		if currentChatID == 0 {
			continue
		}

		err, pinger := commandPing(pingAddress)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:", err)
			continue
		}

		if pinger.Statistics().PacketLoss == 100 {
			alert := tgbotapi.NewMessage(currentChatID, "üö® –ü–æ—Ç–µ—Ä—è 100% –ø–∞–∫–µ—Ç–æ–≤! –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
			bot.Send(alert)
		}
	}
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º chatID –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
func loadChatIDFromFile(chatIDFile string) int64 {
	data, err := os.ReadFile(chatIDFile)
	if err != nil {
		return 0
	}
	var id int64
	fmt.Sscanf(string(data), "%d", &id)
	return id
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º chatID –≤ —Ñ–∞–π–ª
func saveChatIDToFile(id int64, chatIDFile string) {
	f, err := os.Create(chatIDFile)
	if err == nil {
		defer f.Close()
		fmt.Fprintf(f, "%d", id)
	}
}

// –∫–æ–º–∞–Ω–¥–∞ ping
func commandPing(addr string) (error, *ping.Pinger) {
	pinger, err := ping.NewPinger(addr)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pinger"), pinger
	}

	pinger.Count = 4
	pinger.Timeout = 2 * time.Second
	pinger.SetPrivileged(false)

	err = pinger.Run()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pinger"), pinger
	}

	return nil, pinger
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
func checkPort(addr string, port int) (error, bool) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–¥—Ä–µ—Å–æ–º –∏ –ø–æ—Ä—Ç–æ–º
	address := fmt.Sprintf("%s:%d", addr, port)

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ TCP
	conn, err := net.DialTimeout("tcp", address, 2*time.Second)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ TCP (–¥–ª—è –ø–æ—Ä—Ç–∞): %w", err), false // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
	}
	defer conn.Close()

	return nil, true
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ping –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É
func sendEmail(err error, pinger *ping.Pinger, portStatus bool) {
	m := gomail.NewMessage()

	smtpTo := os.Getenv("SMTPTo")
	smtpUser := os.Getenv("SMTPUser")
	smtpPass := os.Getenv("SMTPPass")

	m.SetHeader("From", smtpUser)
	m.SetHeader("To", smtpTo)
	m.SetHeader("Subject", "PING ERROR")

	// –¢–µ–ª–æ –ø–∏—Å—å–º–∞
	body := fmt.Sprintf("–û—à–∏–±–∫–∞ ping: %v\n\n Ping —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ = %d, –ø–æ–ª—É—á–µ–Ω–æ = %d, –ø–æ—Ç–µ—Ä—è–Ω–æ = %.2f%%\n\n –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É: %v",
		err,
		pinger.Statistics().PacketsSent,
		pinger.Statistics().PacketsRecv,
		pinger.Statistics().PacketLoss,
		portStatus,
	)
	m.SetBody("text/plain", body)

	// SMTP-—Å–µ—Ä–≤–µ—Ä –∏ –ø–æ—Ä—Ç
	d := gomail.NewDialer("smtp.mail.ru", 465, smtpUser, smtpPass)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
	if err := d.DialAndSend(m); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", err)
	} else {
		fmt.Println("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}
}
*/
