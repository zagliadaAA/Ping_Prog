package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) showAllResultsForNDays(ctx context.Context, message *tgbotapi.Message) {
	var days int
	arg := message.CommandArguments()
	if arg == "" {
		days = 1
	} else {
		numberOfDays, err := strconv.Atoi(arg)
		if err != nil {
			b.sendMessage(int(message.Chat.ID), fmt.Sprintf("Ô∏è–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: %v", err))
			return
		}

		days = numberOfDays
	}

	// –ü–æ userName –ø–æ–ª—É—á–∞–µ–º user
	user, err := b.userUseCase.GetByUserName(ctx, message.Chat.UserName)
	if err != nil {
		b.sendMessage(int(message.Chat.ID), fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err))
		return
	}

	results, err := b.resultUseCase.ShowAllResultsForNDays(ctx, user.ID, days)
	if err != nil {
		b.sendMessage(int(message.Chat.ID), fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err))
		return
	}

	if len(results) == 0 {
		b.sendMessage(int(message.Chat.ID), "üì≠ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
		return
	}

	loc, err := time.LoadLocation("Asia/Vladivostok")
	if err != nil {
		loc = time.UTC // fallback
	}

	var builder strings.Builder
	for i, res := range results {
		status := "‚úÖ –£—Å–ø–µ—Ö"
		if !res.Result {
			status = "‚ùå –û—à–∏–±–∫–∞"
		}

		created := res.CreatedAt.In(loc).Format("2006-01-02 15:04:05 MST")

		line := fmt.Sprintf("%d. %s:%d ‚Äî %s (%s)\n", i+1, res.Address, res.Port, status, created)
		builder.WriteString(line)
	}

	text := builder.String()

	// Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤
	const chunkSize = 4000

	for i := 0; i < len(text); i += chunkSize {
		end := i + chunkSize
		if end > len(text) {
			end = len(text)
		}
		msg := tgbotapi.NewMessage(message.Chat.ID, text[i:end])
		_, err = b.api.Send(msg)
		if err != nil {
			b.sendMessage(int(message.Chat.ID), "‚ùó–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
			return
		}
	}
}
